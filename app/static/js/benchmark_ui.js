document.addEventListener('DOMContentLoaded', function () {
    const form = document.getElementById('benchmarkForm');
    const resultsDiv = document.getElementById('results');

    form.addEventListener('submit', async function(e) {
        e.preventDefault();

        const formData = new FormData();
        const fileInput = document.getElementById('prompt_file');
        const modelInput = document.getElementById('model');
        const runsInput = document.getElementById('runs');
        const visualizeCheckbox = document.getElementById('visualize');

        if (fileInput.files.length > 0) {
            formData.append('prompt_file', fileInput.files[0]);
        }
        formData.append('model', modelInput.value);
        formData.append('runs', runsInput.value);
        formData.append('visualize', visualizeCheckbox.checked ? "true" : "false");

        const button = form.querySelector('button');
        button.disabled = true;
        resultsDiv.innerHTML = '<p>–ó–∞–ø—É—Å–∫–∞–µ–º –±–µ–Ω—á–º–∞—Ä–∫... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.</p>';

        try {
            const response = await fetch('/api/benchmark', {
                method: 'POST',
                body: formData
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const data = await response.json();

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ
            if (visualizeCheckbox.checked) {
                let tableHtml = `
                    <h2>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ–Ω—á–º–∞—Ä–∫–∞</h2>
                    <table>
                        <thead>
                            <tr>
                                <th>#</th>
                                <th>–ü—Ä–æ–º–ø—Ç</th>
                                <th>Runs</th>
                                <th>Avg Latency</th>
                                <th>Min Latency</th>
                                <th>Max Latency</th>
                                <th>Std Dev</th>
                            </tr>
                        </thead>
                        <tbody>
                `;

                data.forEach((item, index) => {
                    tableHtml += `
                        <tr>
                            <td>${index + 1}</td>
                            <td title="${escapeHtml(item.prompt)}">${escapeHtml(truncate(item.prompt, 50))}</td>
                            <td>${item.runs}</td>
                            <td>${item.avg.toFixed(3)}s</td>
                            <td>${item.min.toFixed(3)}s</td>
                            <td>${item.max.toFixed(3)}s</td>
                            <td>${item.std_dev.toFixed(3)}s</td>
                        </tr>
                    `;
                });

                tableHtml += `
                        </tbody>
                    </table>
                `;

                resultsDiv.innerHTML = tableHtml;
            } else {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º JSON
                resultsDiv.innerHTML = `
                    <h2>üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã (JSON)</h2>
                    <pre>${JSON.stringify(data, null, 2)}</pre>
                `;
            }

        } catch (err) {
            console.error("–û—à–∏–±–∫–∞:", err);
            resultsDiv.innerHTML = `<p style="color: red;">–û—à–∏–±–∫–∞: ${err.message}</p>`;
        } finally {
            button.disabled = false;
        }
    });
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

function truncate(text, maxLength) {
    if (text.length <= maxLength) return text;
    return text.slice(0, maxLength) + '...';
}